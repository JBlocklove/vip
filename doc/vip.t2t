
%!postproc(html): @@ <br>
%!postproc(xhtml): @@ <br />
%!postproc(txt): "@@" ""
%!postproc(art): "@@" ""
%!options: --toc --toc-level 2

= VIP : VHDL Interface Plugin =

%%toc

==============================================================================
== Introduction ==
**VIP** (//VHDL Interface Plug-in//) is a script for VIM text editor (http://www.vim.org/) which provides some facilities to copy paste entities, components and instances of components.@@
For example you can copy the component :

```
  component mux is   -- place the cursor on this line and enter the command :Viy (Vhdl Interface Yank)
    port (
      INPUT  : in  std_logic_vector (15 downto 0);
      SEL    : in  std_logic;
      OUTPUT : out std_logic
    );
  end component mux;
```

and paste it as an instance :

```
  mux_0 : mux   -- place the cursor here and enter the command :Vii (Vhdl Interface Instance)
    port map (
      INPUT   => s_INPUT,
      SEL     => s_SEL,
      OUTPUT  => s_OUTPUT
    );
```

VIP can

- copy an entity and paste it as
 - an entity
 - a component
 - an instance

- copy a component and paste it as
 - an entity
 - a component
 - an instance

- copy a instance and paste it as
 - an instance (with auto-incrementation of the suffix number)


VIP tries to respect your indentation as much as possible (spaces, tabs, spaces + tabs).
It can work with many different styles of writing entities, components and instances, but not all of them. See the "Formatting Blocks" section.


==============================================================================
== Installation ==
Put the plugin/vip.vim file into your ~/.vim/plugin (or $HOME\vimfiles\plugin) directory.@@
Put the doc/vip.txt into your ~/.vim/doc (or $HOME\vimfiles\doc) directory.

Run ":helptags ~/.vim/doc" (":helptags $HOME/vimfiles/doc")


==============================================================================
== Commands ==
**:Viy** or **<leader>y** copy a block (entity, component or instance of component) [**V**hdl **I**nterface **Y**ank]@@
**:Vie** or **<leader>e** paste as entity [**V**hdl **I**nterface **E**ntity]@@
**:Vic** or **<leader>c** paste as component [**V**hdl **I**nterface **C**omponent]@@
**:Vii** or **<leader>i** paste as instance [**V**hdl **I**nterface **I**nstance]@@


== Usage ==
To copy a block, place the cursor on the line with "entity", or "component" word. For instance of components, place the cursor on the instance name.@@
Enter the command **:Viy** to copy the block.

To paste the block, place the cursor where you want to paste it and enter :@@
**:Vie** to paste as an entity@@
**:Vic** to paste as a component@@
**:Vii** to paste as an instance of a component@@

When an entity or a component is pasted as an instance, the ports are duplicated as signals with a "s_" prefix added.@@
If you copy the component (or the entity) :

```
  component mux is  -- place cursor here
    port (
      INPUT  : in  std_logic_vector (15 downto 0);
      SEL    : in  std_logic;
      OUTPUT : out std_logic
    );
  end component b_a;
```

and paste it as an instance. The copy will be :

```
  mux_0 : mux
    port map (
      INPUT   => s_INPUT,
      SEL     => s_SEL,
      OUTPUT  => s_OUTPUT
    );
```

The name of the instance is a duplication of the component's name with a suffix ("_0") added. The suffix number is auto-incremented when you do multiple paste of the same component.

To copy an instance, place the cursor on the line with the instance name :

```
  U2 : clock  -- place cursor here
    generic map (g_WIDTH => 14)
    port map (
      DATA    => s_DATA,
      CLK     => s_CLK,
      RST_SRn => s_RSTn,
      CLK     => s_CLKOUT0(0)
    );
```

and use the **:Viy** command to copy and the **:Vii** to paste.@@
If the instance name has a suffix, the suffix number is incremented. Otherwise, the suffix is added :

```
  U2_0 : clock  -- place cursor here
    generic map (g_WIDTH => 14)
    port map (
      DATA    => s_DATA,
      CLK     => s_CLK,
      RST_SRn => s_RSTn,
      CLK     => s_CLKOUT0(0)
    );
```


==============================================================================
== Formatting Blocks ==
VIP needs some formatting to parse correctly a block. It will fail to read a block if the opening brace is followed by text or if there is no "port" or "generic" keyword before the opening brace in the same line.

Here is some examples of formatting which will **not work** with VIP :

```
  -- Bad formatting
  -- No "port" or "generic" before the opening brace
  component mux is port
  (
    INPUT  : in  std_logic_vector (15 downto 0);
    OUTPUT : out std_logic
  );
  end component mux;
```

```
  -- Bad formatting
  -- Text after the opening brace
  component mux is
    port  (  INPUT  : in  std_logic_vector (15 downto 0);
      OUTPUT : out std_logic
    );
    end component mux;
```

```
  -- Bad formatting
  -- Comment after the opening brace
  component mux is
    port  (   -- bad placed comment
      INPUT  : in  std_logic_vector (15 downto 0);
      OUTPUT : out std_logic
      );
    end component mux;
```

```
  -- Bad formatting
  -- Text after the opening brace
  U0 : clock port map ( CLK => s_CLK );
```

Here is some examples of formatting which will **work** with VIP :

```
  -- Good formatting for VIP
  component mux is port (
    INPUT  : in  std_logic;
    SEL    : in  std_logic;
    OUTPUT : out std_logic
  );
  end component mux;
```

```
  -- Good formatting for VIP
  component mux is
    port (
      INPUT  : in  std_logic;
      SEL    : in  std_logic;
      OUTPUT : out std_logic_vector (15 downto 0)
    );
  end component mux;
```

```
  -- Good formatting for VIP
  component mux is
    port (
      INPUT  : in  std_logic;
      SEL    : in  std_logic;
      OUTPUT : out std_logic_vector (15 downto 0) );
  end component mux;
```

```
  -- Good formatting for VIP
  U0 : clock port map (
    DATA     => s_DATA,
    CLK        => s_CLK,
    RST_SRn    => s_RST_SRn,
    DELAY      => s_DELAY
  );
```

```
  -- Good formatting for VIP
  U1 : clock
  port map (
    DATA     => s_DATA,
    CLK        => s_CLK,
    RST_SRn    => s_RST_SRn,
    DELAY      => s_DELAY
  );
```

```
  -- Good formatting for VIP
  U3 : mux
  generic map (g_WIDTH => 14)
  port map (
    DATA    => s_DATA,
    CLK     => s_CLK,
    RST_SRn => s_RSTn,
    CLK     => s_CLKOUT0(0)
  );
```

```
 -- Good formatting for VIP
 U5 : mux
  generic map (
    g_WIDTH => 14
  )
  port map (
    DATA  => s_DATA,
    CLK     => s_CLK,
    RST_SRn => s_RSTn,
    CLK => s_CLKOUT0(0)
  );
```

```
  U8 : mux generic map (g_WIDTH => 14)
  port map (
    DATA    => s_DATA,
    CLK     => s_CLK,
    RST_SRn => s_RSTn,
    CLK => s_CLKOUT0(0)
  );
```


==============================================================================
== Configuration ==
To avoid the loading of VIP plugin, you can set the global variable g:loaded_VIP to 1 in your vimrc file.
    let g:loaded_sequence = 1

To change the signal prefix, change the global variable g:sigPrefix_VIP.
Set it to an empty string ("") if you don't want a prefix.
    let g:sigPrefix_VIP = "sig_"
    let g:sigPrefix_VIP = ""

To change the instance's name suffix, change the global variable g:instSuffix_VIP.
Set it to an empty string ("") if you don't want a suffix.
    let g:instSuffix_VIP = "_"
    let g:instSuffix_VIP = ""

To change the entity word, change the global variable g:entityWord_VIP.
    let g:entityWord_VIP = "Entity"
    let g:entityWord_VIP = "ENTITY"

To change the component word, change the global variable g:componentWord_VIP.
    let g:componentWord_VIP = "Component"
    let g:componentWord_VIP = "COMPONENT"

To disable the auto-incrementation of the instance's name, set the global variable g:autoInc_VIP to 0.
    let g:autoInc_VIP = 0 " auto-incrementation disabled
    let g:autoInc_VIP = 1 " auto-incrementation allowed

Add to your vimrc file any variable you want to change permanently.

You can remap the commands to any key you want by using the "nmap" command.@@
For example, you can add to your vimrc file :

nmap <F2> :Viy<CR>@@
nmap <F3> :Vie<CR>@@
nmap <F4> :Vic<CR>@@
nmap <F5> :Vii<CR>@@

__Note__ : don't use <F1>, it is already used for help.


==============================================================================
== Download, Feedback and Contact ==
Download : http://www.vim.org/scripts/@@
Contact, feedback : http://www.microreflexion.com/?page_id=9 @@
Source code : http://gitorious.org/vip


==============================================================================
== License ==
```
	Copyright (C) 2010 JP Ricaud
	
	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU Lesser General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Lesser General Public License for more details.
```
http://www.gnu.org/licenses/


==============================================================================
== History ==
=== Version 1.0.0 ; nov. 17 2010 ===
 - First public release
 - Added verification of existing global variable
 - Documentation updated


=== Version 0.1.5 ; nov. 16 2010 ===
 - Added auto-incrementation on / off
 - Documentation updated


=== Version 0.1.4 ; nov. 14 2010 ===
 - Added auto-incrementation of instance name
 - Documentation updated


=== Version 0.1.3 ; nov. 14 2010 ===
 - Added global variable for signal prefix, instance's name suffix, entity and component name
 - Documentation updated


=== Version 0.1.2 ; nov. 13 2010 ===
 - Added check for cases where the closing brace is preceded with another brace like (m downto n));


=== Version 0.1.1 ; nov. 11 2010 ===
 - Check for empty line in function CheckType()
 - Check for line with only ")" and ");" in function CheckType()
 - Check for missing ");" in function CheckType()


=== Version 0.1.0 ; nov. 08 2010 ===
 - First alpha release


% vim:set noexpandtab ff=unix
